
App.jsx
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import Mobile from "./Mobile.jsx";
import "./App.css";
import PodcastsMobile from "./PodcastsMobile.jsx";
import BooksMobile from "./BooksMobile.jsx";

const App = () => {
  return (
    <>
      <Router>
        <Routes>
          <Route path='/' element={<Mobile />} />
          <Route path='/podcastsmobile' element={<PodcastsMobile />} />
          <Route path='/booksmobile' element={<BooksMobile />} />
        </Routes>
      </Router>
    </>
  );
};

export default App;

App.css
:root {
  --main-bg-color: rgb(32, 32, 32);
  --main-green-color: #76b39d;
  font-size: 12px;
}

body {
  background-color: var(--main-bg-color);
  overflow-y: auto;
  overflow-x: hidden;
}

/* Header Styles */

.icon {
  /* position: absolute;
  left: -46px; */
  color: var(--main-green-color);
}

.plus-circle-container {
  display: flex;
  justify-content: center;
}

.link-container {
  display: flex;
  align-items: center;
  padding-left: 20px;
}

.link-container > a {
  text-decoration: none;
  color: white;
  padding: 10px;
  font-size: 2rem;
}

.signin-container {
  display: flex;
  align-items: center;
  justify-content: center;
}

.signin-container > button {
  margin: 10px;
  padding: 14px 24px;
  background-color: var(--main-bg-color);
  border: 2px solid var(--main-green-color);
  color: var(--main-green-color);
  border-radius: 300px;
  font-size: 18px;
}

.signin-container span > img {
  max-width: 25px;
  align-items: center;
}

.main-container {
  background-color: var(--main-bg-color);
  height: 60vh;
}

/* Body Styles */
.body-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 20px;
  background-color: var(--main-bg-color);
}

.body-container > h1 {
  color: white;
  margin: 20px;
  font-weight: 400;
  font-size: 3.5rem;
}

.body-container > h3 {
  font-size: 2.7rem;
  font-weight: 300;
  color: var(--main-green-color);
}

label {
  color: white;
  font-size: 20px;
  margin: 10px;
  padding: 5px 10px 0px 10px;
}

label > select {
  width: 150px;
  padding: 10px;
  margin: 10px;
  border-radius: 10px;
}

.item-container {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
}

.list-item {
  display: flex;
  flex-direction: column;
  justify-content: space-around;
  align-items: center;
  text-align: center;
  margin: 10px;
  padding: 5px;
  width: 200px;
  height: 250px;
  color: black;
  background-color: rgb(177, 177, 177);
  border-radius: 5px;
  filter: drop-shadow(3px 3px 1px rgba(0, 0, 0, 0.1));
}

.list-item:hover {
  background-color: #f0f0f0;
  cursor: pointer;
  transform: scale(1.05);
  transition: transform 0.5s;
}

.item-container img {
  margin-top: 20px;
  max-width: 100%;
  height: auto;
  object-fit: cover;
  max-height: 150px;
  border-radius: 8px;
}

.filter-container {
  display: flex;
}

.filter-container > label {
  font-size: 18px;
}

.react-select__control {
  width: 250px;
  font-size: 16px;
}

.react-select__menu {
  font-size: 14px;
}

.spotify-container {
  display: flex;
  justify-content: center;
  margin: 10px 0;
}

/* Grid Layouts */
.grid-divider {
  margin-top: 100px;
  padding: 20px;
  display: grid;
  gap: 20px;
  grid-template-columns: 1fr 1fr;
  grid-template-rows: repeat(2, minmax(100px, 250px));
  width: 90vw;
  height: 60vh;
  align-items: baseline;
  position: relative;
}

.grid-divider-two {
  display: grid;
  gap: 20px;
  /* transform: scale(0.8); */
  max-width: 80vw;
}

/* Bookshelf Styles */
.bookshelf-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  grid-column: 2 / 3;
}

.bookshelf-container2 {
  display: grid;
  grid-template-columns: repeat(30, 1fr);
  justify-items: center;
  width: auto;
  margin-bottom: 30px;
  align-items: end;
}

.bookshelf,
.bookshelf2 {
  display: flex;
  justify-content: center;
  align-items: flex-end;
  background-color: var(--main-bg-color);
  gap: 1px;
}

.bookshelf2 {
  width: 100%;
  margin: auto;
}

.book,
.book2 {
  display: flex;
  flex-direction: column;
  align-items: center;
  height: auto;
  cursor: pointer;
  transition: all 0.3s ease;
}

.book {
  min-width: 15px;
  max-width: 35px;
}

.book2 {
  width: 30px;
}

.book2:hover {
  transform: scale(1.1) rotate(10deg) translate(10px, -10px);
  transition: all 0.5s ease;
  z-index: 10;
  box-shadow: 0 8px 12px rgba(0, 0, 0, 0.2);
}

.book-image {
  width: 100%;
  height: auto;
  object-fit: contain;
  border-radius: 3px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.book-title,
.book-title2 {
  display: none;
  position: absolute;
  width: 100%;
  padding: 10px;
  font-size: 12px;
  text-align: center;
  color: transparent;
}

/* Podcast Styles */
.podcast-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  grid-column: 1 / 2;
}

.podcastshelf,
.podcastshelf2 {
  display: flex;
  justify-content: center;
  align-items: flex-end;
  background-color: var(--main-bg-color);
  gap: 1px;
}

.podcastshelf2 {
  flex-wrap: wrap;
}

.podcast,
.podcast2 {
  display: flex;
  flex-direction: column;
  align-items: center;
  transition: all 0.3s ease;
  cursor: pointer;
}

.podcast {
  min-width: 50px;
  height: auto;
}

.podcast2 {
  width: 150px;
}

.podcast2:hover {
  transform: scale(1.1) rotate(380deg) translate(10px, -10px);
  transition: all 0.6s ease;
  z-index: 10;
  box-shadow: 0 8px 12px rgba(0, 0, 0, 0.2);
}

.podcast-image {
  width: 100%;
  height: auto;
  object-fit: contain;
  border-radius: 3px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.podcast-title {
  display: none;
  position: absolute;
  width: 100%;
  padding: 10px;
  font-size: 12px;
  text-align: center;
  color: transparent;
}

.shelf-image,
.shelf-image2 {
  width: 100%;
  height: auto;

  border-radius: 0.01px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.shelf-image2 {
  grid-column: 1 / -1;
  margin-bottom: 40px;
}

/* Buttons */
.podcast-button,
.book-button {
  position: absolute;
  top: 22%;
  padding: 50px 150px;
  font-size: 54px;
  background-color: gray;
  color: white;
  border: none;
  border-radius: 10px;
  cursor: pointer;
}

.podcast-button:active,
.book-button:active {
  background-color: var(--main-green-color);
}

.top-picks-button {
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 20px 200px;
  margin: auto;
  height: 20px;
  font-size: 22px;
  color: white;
  background-color: transparent;
  border: 3px solid var(--main-green-color);
  border-radius: 100px;
}

.top-picks-button > span {
  margin-right: 10px;
  font-size: 28px;
}

.top-picks-list {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  margin-left: 50px;
  font-size: 20px;
  color: white;
  padding-left: 0px;
}

.top-picks-list a {
  text-decoration: none;
  color: inherit;
  display: flex;
  align-items: center;
}

.upperCheckboxes {
  display: flex;
  background-color: rgb(32, 32, 32);
  border-right: 0.5px solid #76b39d;
  border-left: 0.5px solid #76b39d;
  justify-content: space-around;
  padding-top: 10px;
}

.upperCheckboxes label {
  color: white;
  font-size: 14px;
  display: flex;
  align-items: center;
  gap: 10px;
}

.upperCheckboxes input[type="checkbox"] {
  -webkit-appearance: none;
  appearance: none;
  width: 16px;
  height: 16px;
  background-color: white;
  border: 2px solid #76b39d;
  border-radius: 3px;
  display: inline-block;
  cursor: pointer;
}

.upperCheckboxes input[type="checkbox"]:checked {
  background-color: white;
  border-color: #76b39d;
}

.upperCheckboxes input[type="checkbox"]:checked::before {
  content: "âœ”";
  display: flex;
  justify-content: center;
  align-items: center;
  color: black;
  font-size: 12px;
  width: 100%;
  height: 100%;
}

.upperCheckboxes input[type="checkbox"]::before {
  content: "";
  display: block;
  width: 100%;
  height: 100%;
}

/* Media Queries */
@media (max-width: 768px) {
  .body-container {
    padding: 0;
    overflow-y: auto;
    display: block;
    max-height: 100vh;
  }

  .body-container > h1 {
    font-size: 3rem;
  }

  .body-container > h3 {
    font-size: 2.2rem;
    margin: 0 20px;
  }

  .grid-divider {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 20px;
    width: 100vw;
  }

  .grid-divider-two {
    overflow-y: auto;
    max-height: 80vh;
  }

  .bookshelf-container {
    transform: scale(0.8);
  }

  .bookshelf-container2 {
    grid-template-columns: repeat(15, 30px);
    overflow-y: scroll;
    overflow-x: hidden;
  }

  .podcast-button,
  .book-button {
    position: relative;
    padding: 30px 80px;
    font-size: 3rem;
  }

  .top-picks-button {
    padding: 20px 80px;
  }

  .podcast2 {
    width: 145px;
  }

  .filter-container {
    display: none;
  }

  body {
    overflow-y: hidden;
  }

  .PrivateSwitchBase-input {
    background-color: red;
  }

  .PrivateSwitchBase-input:checked {
    background-color: red;
  }

  label {
    color: black;
    padding: 0px;
    margin: 0px;
  }

  .top-picks-list {
    font-size: 1.2rem;
    margin: 0px 10px;
    list-style-position: inside;
    padding-bottom: 20px;
  }
}


Mobile.jsx
import Header from "./Components/Header";
import { useState, useEffect, useRef } from "react";
import styles from "./mobile.module.css";
import library from "/library.png";
import studio from "/studio.png";
import { Link } from "react-router-dom";

function Mobile() {
  const [libraryHovered, setLibraryHovered] = useState(false);
  const [studioHovered, setStudioHovered] = useState(false);

  const modalLibraryRef = useRef(null);
  const modalStudioRef = useRef(null);

  const active = libraryHovered
    ? `${styles.imgContainer} ${styles.applyOpacity}`
    : styles.imgContainer;

  const what = studioHovered
    ? `${styles.imgContainer} ${styles.applyOpacity}`
    : styles.imgContainer;

  useEffect(() => {
    const handleClickOutsideLibrary = (event) => {
      if (
        modalLibraryRef.current &&
        !modalLibraryRef.current.contains(event.target)
      ) {
        closeLibraryModal();
      }
    };

    document.addEventListener("mousedown", handleClickOutsideLibrary);
    document.addEventListener("touchstart", handleClickOutsideLibrary);

    return () => {
      document.removeEventListener("mousedown", handleClickOutsideLibrary);
      document.addEventListener("touchstart", handleClickOutsideLibrary);
    };
  }, [libraryHovered]);

  useEffect(() => {
    const handleClickOutsideStudio = (event) => {
      if (
        modalStudioRef.current &&
        !modalStudioRef.current.contains(event.target)
      ) {
        closeStudioModal();
      }
    };

    document.addEventListener("mousedown", handleClickOutsideStudio);
    document.addEventListener("touchstart", handleClickOutsideStudio);

    return () => {
      document.removeEventListener("mousedown", handleClickOutsideStudio);
      document.addEventListener("touchstart", handleClickOutsideStudio);
    };
  }, [studioHovered]);

  const closeLibraryModal = () => {
    setLibraryHovered(false);
  };

  const openLibraryModal = () => {
    setLibraryHovered(true);
  };

  const openStudioModal = () => {
    setStudioHovered(true);
  };

  const closeStudioModal = () => {
    setStudioHovered(false);
  };

  return (
    <>
      <Header />
      <div className={styles.container}>
        <h2 className={styles.mainText}>Feeling inspired to learn?</h2>
        <div
          className={what}
          onClick={() => openLibraryModal()}
          ref={modalLibraryRef}
        >
          <img src={library} alt='' />
          {libraryHovered && (
            <Link to='/booksmobile'>
              <button className={styles.button}>Book</button>
            </Link>
          )}
        </div>
        <div
          className={active}
          onClick={() => openStudioModal()}
          ref={modalStudioRef}
        >
          <img src={studio} alt='' />
          {studioHovered && (
            <Link to='/podcastsmobile'>
              <button className={styles.button}>Podcast</button>
            </Link>
          )}
        </div>
        <h2 className={styles.secondText}>
          Let us suggest a <span className='span'>book or podcast</span>{" "}
          tailored to your preferences
        </h2>
      </div>
    </>
  );
}

export default Mobile;

mobile.module.css
.container {
  display: flex;
  flex-direction: column;
  align-items: center;
  color: white;
  margin: 30px;
  text-align: center;
}

.imgContainer {
  width: 200px;
  height: 200px;
  margin: 20px;
  position: relative;
}

.applyOpacity {
  opacity: 0.2;
}

.imgContainer img {
  max-width: 100%;
  border: 3px solid #76b39d;
  border-radius: 12px;
}

.button {
  width: 160px;
  height: 50px;
  background-color: #76b39d;
  color: black;
  border: none;
  border-radius: 24px;
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  font-size: 18px;
}

.mainText,
.secondText {
  font-size: 24px;
  font-weight: 400;
}

.secondText {
  color: #76b39d;
}

.secondText span {
  color: white;
}

.span {
  color: white;
}

@media (width > 1100px) {
  .container {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    grid-template-rows: 60px 60px 500px;
    justify-items: center;
  }

  .mainText {
    grid-row: 1 / 2;
    grid-column: 1 / 3;
    font-size: 34px;
  }
  .secondText {
    grid-row: 2 / 3;
    grid-column: 1 / 3;
    font-size: 34px;
  }
  .imgContainer {
    width: 400px;
    height: 400px;
  }
  .imgContainer img {
    height: 100%;
    width: 100%;
  }
}

PodcastsMobile.jsx
import { useState, useEffect } from "react";
import Header from "./Components/Header";
import Airtable from "airtable";
import Drawer from "./Components/Drawer2.jsx";
import Accordion2 from "./Components/Accordion2.jsx";
import TopPicks from "./Components/TopPicks.jsx";
import { useWindowSize } from "@uidotdev/usehooks";
import Modal from "./Components/Modal.jsx";
import FilterComponent from "./Components/FilterComponent.jsx";
import mic from "/mic2.png";
import Pods from "./Components/Pods.jsx";
import styles from "./podcastsmobile.module.css";

function PodcastsMobile() {
  const [records, setRecords] = useState([]);
  const [filteredRecords, setFilteredRecords] = useState([]);
  const [topPicks, setTopPicks] = useState([]);
  const [filters, setFilters] = useState({
    skill: [],
    concept: [],
    language: [],
  });
  const [uniqueSkills, setUniqueSkills] = useState([]);
  const [uniqueConcepts, setUniqueConcepts] = useState([]);
  const [uniqueTypes, setUniqueTypes] = useState([]);
  const [uniqueTimes, setUniqueTimes] = useState([]);
  const [uniqueLanguages, setUniqueLanguages] = useState([]);
  const [showTopPicks, setShowTopPicks] = useState(false);
  const [selectedTimes, setSelectedTimes] = useState([]);
  const [clicked, setClicked] = useState(false);
  const [selectedPodcast, setSelectedPodcast] = useState(null);

  const API_KEY = import.meta.env.VITE_API_KEY;

  const { width } = useWindowSize();

  useEffect(() => {
    const base = new Airtable({ apiKey: API_KEY }).base("appz3L59vDo6XArUw");

    base("Podcasts")
      .select({
        maxRecords: 100,
        view: "Grid view",
      })
      .eachPage(
        (records, fetchNextPage) => {
          const formattedRecords = records.map((record) => {
            const fields = record.fields || {};
            return {
              id: record.id,
              name: fields.Name || "",
              skill: fields["Skill not taught in School"] || [],
              concept: fields["Key Concept"] || [],
              time: fields["Time to Finish"] || [],
              type: fields.Type || [],
              description: fields["Description"] || "",
              spotifyUrl: fields["Link to Reco"] || "",
              topScore: fields["Top"] || 0,
              language: fields.Language || [],
            };
          });

          setRecords(formattedRecords);
          setFilteredRecords(formattedRecords);

          // Filter the top 10 podcasts based on the "Top" field
          const topPodcasts = formattedRecords
            .filter((record) => record.topScore && !isNaN(record.topScore))
            .sort((a, b) => b.topScore - a.topScore)
            .slice(0, 10);

          setTopPicks(topPodcasts);

          // Extract unique values for each filter field
          const extractUniqueValues = (records, field) => {
            const valueSet = new Set();
            records.forEach((record) => {
              const values = record[field];
              if (Array.isArray(values)) {
                values.forEach((value) =>
                  valueSet.add(value.trim().toLowerCase())
                );
              }
            });
            return Array.from(valueSet).sort();
          };

          setUniqueSkills(extractUniqueValues(formattedRecords, "skill"));
          setUniqueConcepts(extractUniqueValues(formattedRecords, "concept"));
          setUniqueTypes(extractUniqueValues(formattedRecords, "type"));
          setUniqueTimes(extractUniqueValues(formattedRecords, "time"));
          setUniqueLanguages(extractUniqueValues(formattedRecords, "language"));

          fetchNextPage();
        },
        (err) => {
          if (err) {
            console.error("Error fetching Airtable records:", err);
          }
        }
      );
  }, []);

  const handleFilterChange = (selectedOptions, { name }) => {
    let selectedValues = [];
    if (Array.isArray(selectedOptions)) {
      if (typeof selectedOptions[0] === "string") {
        // From mobile (CheckboxGroup)
        selectedValues = selectedOptions;
      } else {
        // From desktop (React Select)
        selectedValues = selectedOptions.map((option) => option.value);
      }
    }

    setFilters({
      ...filters,
      [name]: selectedValues,
    });
  };

  useEffect(() => {
    const filtered = records.filter((record) => {
      const matchesArray = (array, filter) =>
        filter.length === 0 ||
        array.some((value) => filter.includes(value.trim().toLowerCase()));

      return (
        matchesArray(record.skill, filters.skill) &&
        matchesArray(record.concept, filters.concept) &&
        matchesArray(record.language, filters.language)
      );
    });

    setFilteredRecords(filtered);
  }, [filters, records]);

  const closeDrawer = () => {
    setClicked(true);
  };

  useEffect(() => {
    return () => {
      setClicked(false);
    };
  }, [closeDrawer]);

  const timeOptions = [
    { label: "< 30 mins", style: styles.micOne, display: "< 30\nmins" },
    { label: "31-45 mins", style: styles.micTwo, display: "31-45\nmins" },
    { label: "45-60 mins", style: styles.micThree, display: "45-60\nmins" },
    { label: "1-2 hours", style: styles.micFour, display: "1-2\nhours" },
    { label: "2-3 hours", style: styles.micFive, display: "2-3\nhours" },
    { label: "+3 hours", style: styles.micSix, display: ">3\nhours" },
  ];

  const handleTimeClick = (timeLabel) => {
    setSelectedTimes((prevSelectedTimes) => {
      if (prevSelectedTimes.includes(timeLabel)) {
        return prevSelectedTimes.filter((time) => time !== timeLabel);
      } else {
        return [...prevSelectedTimes, timeLabel];
      }
    });
  };

  const customStyles = {
    control: (provided) => ({
      ...provided,
      backgroundColor: "transparent",
      border: "2px solid #76b39d",
      borderRadius: "12px",
    }),
    option: (provided, state) => ({
      ...provided,
      backgroundColor: state.isSelected ? "rgb(6, 144, 103)" : "transparent",
      color: state.isSelected ? "rgb(6, 144, 103)" : "white",
      ":hover": {
        backgroundColor: "#76b39d",
      },
    }),
    multiValue: (provided) => ({
      ...provided,
      backgroundColor: "#76b39d",
      borderRadius: "4px",
    }),
    menu: (provided) => ({
      ...provided,
      backgroundColor: "transparent",
      border: "2px solid #76b39d",
    }),
  };

  const convertToEmbedUrl = (url) => {
    if (!url) {
      console.log("No URL provided");
      return "";
    }
    const episodeId = url.match(/episode\/([a-zA-Z0-9]+)/)?.[1];
    console.log("Extracted Spotify Episode ID:", episodeId);
    const embedUrl = episodeId
      ? `https://open.spotify.com/embed/episode/${episodeId}?utm_source=generator`
      : "";
    console.log("Final Embed URL:", embedUrl);
    return embedUrl;
  };

  const suggestRandomPodcast = () => {
    if (filteredRecords.length === 0) return;
    const randomIndex = Math.floor(Math.random() * filteredRecords.length);
    const randomPodcast = filteredRecords[randomIndex];
    console.log("Random Podcast selected:", randomPodcast);

    const embedUrl = convertToEmbedUrl(randomPodcast.spotifyUrl);

    setSelectedPodcast({ ...randomPodcast, spotifyUrl: embedUrl });
  };

  return (
    <>
      <Header />
      {width > 768 ? (
        <>
          <div className={styles.filterComponentsContainer}>
            <FilterComponent
              filters={filters}
              handleFilterChange={handleFilterChange}
              uniqueSkills={uniqueSkills}
              uniqueConcepts={uniqueConcepts}
              uniqueTypes={uniqueTypes}
              uniqueTimes={uniqueTimes}
              customStyles={customStyles}
              uniqueLanguages={uniqueLanguages}
              component='Podcasts'
            />
          </div>
          <div className={styles.bodyContainer}>
            <div className={styles.background}>
              <div className={styles.podContainer}>
                {showTopPicks && (
                  <Modal
                    title='Top Picks'
                    topPicks={() => (
                      <TopPicks topList={topPicks} type={"podcast"} />
                    )}
                    onClose={() => setShowTopPicks(false)}
                  />
                )}
                <Pods
                  selectedSkills={filters.skill}
                  records={filteredRecords}
                  selectedTimes={selectedTimes}
                  setSelectedPodcast={setSelectedPodcast}
                />
              </div>
            </div>
            <div className={styles.timeContainer}>
              <h3>Time available:</h3>
              <div className={styles.podcastsGrid}>
                {timeOptions.map((timeOption) => (
                  <div
                    key={timeOption.label}
                    className={`${styles.timeSpan} ${
                      selectedTimes.includes(timeOption.label)
                        ? styles.selected
                        : ""
                    }`}
                    onClick={() => handleTimeClick(timeOption.label)}
                  >
                    <img src={mic} alt='' className={timeOption.style} />
                    <span>{timeOption.display}</span>
                  </div>
                ))}
              </div>
              <div className={styles.buttonContainer}>
                <button
                  className={styles.button}
                  onClick={() => {
                    closeDrawer();
                    setShowTopPicks(true);
                  }}
                >
                  Top Picks
                </button>
                <button
                  className={styles.button}
                  onClick={() => {
                    closeDrawer();
                    suggestRandomPodcast();
                  }}
                >
                  Suggest a random podcast
                </button>
              </div>
            </div>
          </div>
          {selectedPodcast && (
            <Modal
              description={selectedPodcast.description}
              spotifyUrl={selectedPodcast.spotifyUrl}
              time={selectedPodcast.time}
              skills={selectedPodcast.skill}
              concepts={selectedPodcast.concept}
              onClose={() => setSelectedPodcast(null)}
            />
          )}
        </>
      ) : (
        <>
          <div className={styles.bodyContainer}>
            <div className={styles.background}>
              <div className={styles.podContainer}>
                {showTopPicks && (
                  <Modal
                    title='Top Picks'
                    topPicks={() => (
                      <TopPicks topList={topPicks} type={"podcast"} />
                    )}
                    onClose={() => setShowTopPicks(false)}
                  />
                )}
                <Pods
                  selectedSkills={filters.skill}
                  records={filteredRecords}
                  selectedTimes={selectedTimes}
                  setSelectedPodcast={setSelectedPodcast}
                />
              </div>
            </div>
            <div className={styles.timeContainer}>
              <h3>Time available:</h3>
              <div className={styles.podcastsGrid}>
                {timeOptions.map((timeOption) => (
                  <div
                    key={timeOption.label}
                    className={`${styles.timeSpan} ${
                      selectedTimes.includes(timeOption.label)
                        ? styles.selected
                        : ""
                    }`}
                    onClick={() => handleTimeClick(timeOption.label)}
                  >
                    <img src={mic} alt='' className={timeOption.style} />
                    <span>{timeOption.display}</span>
                  </div>
                ))}
              </div>
            </div>
          </div>
          <Drawer
            className='drawer'
            clicked={clicked}
            drawerText={"Swipe to filter your podcast preferences"}
          >
            <Accordion2
              filters={filters}
              handleFilterChange={handleFilterChange}
              uniqueSkills={uniqueSkills}
              uniqueConcepts={uniqueConcepts}
            />
            <div className={styles.buttonContainer}>
              <button
                className={styles.button}
                onClick={() => {
                  closeDrawer();
                  setShowTopPicks(true);
                }}
              >
                Top Picks
              </button>
              <button
                className={styles.button}
                onClick={() => {
                  closeDrawer();
                  suggestRandomPodcast();
                }}
              >
                Suggest a random podcast
              </button>
            </div>
          </Drawer>
          {selectedPodcast && (
            <Modal
              description={selectedPodcast.description}
              spotifyUrl={selectedPodcast.spotifyUrl}
              time={selectedPodcast.time}
              skills={selectedPodcast.skill}
              concepts={selectedPodcast.concept}
              onClose={() => setSelectedPodcast(null)}
            />
          )}
        </>
      )}
    </>
  );
}

export default PodcastsMobile;

podcastsmobile.module.css
.background {
  position: relative;
  z-index: 1;
}

.background::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-image: url("/studioBackground.jpg");
  background-repeat: repeat;
  background-position: center;
  opacity: 1;
  z-index: -1;
}

.podContainer {
  overflow-y: scroll;
  height: 60dvh;
  width: 100dvw;
  padding: 20px;
  position: relative;
}

.timeContainer {
  margin: 10px 5px;
  display: flex;
  flex-direction: column;
}

.timeContainer h3 {
  color: white;
  margin: 0px 3dvw;
  padding: 10px 0px;
}

.podcastsGrid {
  display: grid;
  grid-template-columns: repeat(6, 1fr);
  height: 24dvw;
  width: 100%;
  align-items: center;
  justify-items: center;
}

.podcastsGrid span {
  font-size: 10px;
  text-align: center;
  white-space: pre-line;
}

.micOne,
.micTwo,
.micThree,
.micFour,
.micFive,
.micSix {
  height: 60px;
  justify-self: center;
  align-self: center;
  border-radius: 4px;
}

.micOne {
  background-color: rgb(118, 179, 157);
}

.micTwo {
  background-color: rgb(150, 127, 102);
}

.micThree {
  background-color: rgb(133, 158, 156);
}

.micFour {
  background-color: rgb(151, 143, 163);
}

.micFive {
  background-color: rgb(209, 179, 124);
}

.micSix {
  background-color: rgb(121, 66, 31);
}

.timeSpan {
  display: flex;
  flex-direction: column;
  align-items: center;
  cursor: pointer;
}

.timeSpan span {
  padding: 10px 5px;
  color: white;
}

.selected {
  border: 2px solid #76b39d;
  border-radius: 6px;
}

.buttonContainer {
  display: flex;
  justify-content: space-between;
  padding-top: 10px;
}

.button {
  color: black;
  border: 3px solid #76b39d;
  border-radius: 10px;
  background-color: rgb(203, 203, 192);
  width: 180px;
  height: 35px;
}

@media (min-width: 768px) {
  .background {
    width: 60dvw;
    z-index: 0;
  }

  .background::before {
    width: 60dvw;
    right: 0;
  }

  .podContainer {
    width: 60dvw;
    right: 0;
  }

  .podContainer::-webkit-scrollbar {
    display: none;
  }

  .timeContainer {
    min-height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    width: 100%;
  }

  .bodyContainer {
    display: flex;
    flex-direction: row-reverse;
    width: 95%;
    margin-top: 50px;
  }

  .podcastsGrid {
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(2, 1fr);
    width: 60%;
    height: fit-content;
  }

  .buttonContainer {
    flex-direction: column;
  }
  .buttonContainer button {
    margin-bottom: 20px;
  }
  .filterComponentsContainer {
    display: flex;
    justify-content: center;
    z-index: 20;
  }
}


BooksMobile.jsx
import { useState, useEffect } from "react";
import Header from "./Components/Header";
import Airtable from "airtable";
import Drawer from "./Components/Drawer2.jsx";
import Accordion2 from "./Components/Accordion2.jsx";
import TopPicks from "./Components/TopPicks.jsx";
import { useWindowSize } from "@uidotdev/usehooks";
import Modal from "./Components/Modal.jsx";
import FilterComponent from "./Components/FilterComponent.jsx";
import styles from "./booksmobile.module.css";
import Buk from "./Components/Buk.jsx";

function BooksMobile() {
  const [records, setRecords] = useState([]);
  const [filteredRecords, setFilteredRecords] = useState([]);
  const [topPicks, setTopPicks] = useState([]);
  const [filters, setFilters] = useState({
    skill: [],
    concept: [],
    type: [],
  });
  const [uniqueSkills, setUniqueSkills] = useState([]);
  const [uniqueConcepts, setUniqueConcepts] = useState([]);
  const [uniqueTypes, setUniqueTypes] = useState([]);
  const [showTopPicks, setShowTopPicks] = useState(false);
  const [clicked, setClicked] = useState(false);
  const [selectedBook, setSelectedBook] = useState(null);
  const { width } = useWindowSize();
  const API_KEY = import.meta.env.VITE_API_KEY;

  // Fetch Airtable records and initialize filters
  useEffect(() => {
    const base = new Airtable({ apiKey: API_KEY }).base("appz3L59vDo6XArUw");

    base("Books")
      .select({ maxRecords: 100, view: "Grid view" })
      .eachPage(
        (records, fetchNextPage) => {
          const formattedRecords = formatRecords(records);
          setRecords(formattedRecords);
          setFilteredRecords(formattedRecords);
          setTopPicks(getTopPicks(formattedRecords));
          setUniqueSkills(extractUniqueValues(formattedRecords, "skill"));
          setUniqueConcepts(extractUniqueValues(formattedRecords, "concept"));
          setUniqueTypes(extractUniqueValues(formattedRecords, "type"));
          fetchNextPage();
        },
        (err) => {
          if (err) console.error("Error fetching Airtable records:", err);
        }
      );
  }, []);

  // Format Airtable records
  const formatRecords = (records) =>
    records.map((record) => {
      const fields = record.fields || {};
      return {
        id: record.id,
        name: fields.Name || "",
        skill: fields["Skill not taught in School"] || [],
        concept: fields["Key Concepts"] || [],
        type: fields.Type || [],
        recoImg: fields.Portadas?.[0]?.url || null,
        author: fields.Author || "unknown",
        oneLiner: fields["One-Liner"] || "",
        link: fields["Link to Reco"] || "",
        topScore: fields["Top"] || 0,
      };
    });

  const getTopPicks = (records) =>
    records
      .filter((record) => record.topScore && !isNaN(record.topScore))
      .sort((a, b) => b.topScore - a.topScore)
      .slice(0, 10);

  const extractUniqueValues = (records, field) => {
    const valueSet = new Set();
    records.forEach((record) => {
      const values = record[field];
      if (Array.isArray(values)) {
        values.forEach((value) => valueSet.add(value.trim().toLowerCase()));
      }
    });
    return Array.from(valueSet).sort();
  };

  const handleFilterChange = (selectedOptions, { name }) => {
    const selectedValues = Array.isArray(selectedOptions)
      ? selectedOptions.map((option) =>
          typeof option === "string" ? option : option.value
        )
      : [];

    setFilters((prevFilters) => ({
      ...prevFilters,
      [name]: selectedValues,
    }));
  };

  useEffect(() => {
    const filtered = records.filter((record) => {
      const matchesArray = (array, filter) =>
        filter.length === 0 ||
        array.some((value) => filter.includes(value.trim().toLowerCase()));
      return (
        matchesArray(record.skill, filters.skill) &&
        matchesArray(record.concept, filters.concept) &&
        matchesArray(record.type, filters.type)
      );
    });
    setFilteredRecords(filtered);
  }, [filters, records]);

  const customStyles = {
    control: (provided) => ({
      ...provided,
      backgroundColor: "transparent",
      border: "2px solid #76b39d",
      borderRadius: "12px",
    }),
    option: (provided, state) => ({
      ...provided,
      backgroundColor: state.isSelected ? "rgb(6, 144, 103)" : "transparent",
      color: state.isSelected ? "rgb(6, 144, 103)" : "white",
      ":hover": { backgroundColor: "#76b39d" },
    }),
    multiValue: (provided) => ({
      ...provided,
      backgroundColor: "#76b39d",
      borderRadius: "4px",
    }),
    menu: (provided) => ({
      ...provided,
      backgroundColor: "transparent",
      border: "2px solid #76b39d",
    }),
  };

  const suggestRandomBook = () => {
    if (filteredRecords.length === 0) return;
    const randomBook =
      filteredRecords[Math.floor(Math.random() * filteredRecords.length)];
    setSelectedBook(randomBook);
  };

  const closeDrawer = () => setClicked(true);

  const renderSelectedBookModal = () =>
    selectedBook && (
      <Modal
        author={selectedBook.author}
        oneLiner={selectedBook.oneLiner}
        cover={selectedBook.recoImg}
        link={selectedBook.link}
        onClose={() => setSelectedBook(null)}
      />
    );

  const renderTopPicksModal = () =>
    showTopPicks && (
      <Modal
        title='Top Picks'
        topPicks={() => <TopPicks topList={topPicks} type={"book"} />}
        onClose={() => setShowTopPicks(false)}
      />
    );

  const renderButtons = () => (
    <div className={styles.buttonContainer}>
      <button
        className={styles.button}
        onClick={() => {
          closeDrawer();
          setShowTopPicks(true);
        }}
      >
        Top Picks
      </button>
      <button
        className={styles.button}
        onClick={() => {
          closeDrawer();
          suggestRandomBook();
        }}
      >
        Suggest a random book
      </button>
    </div>
  );

  return (
    <>
      <Header />
      {width < 768 ? (
        <>
          <div className={styles.bodyContainer}>
            {renderTopPicksModal()}
            <Buk
              selectedSkills={filters.skill}
              records={filteredRecords}
              setSelectedBook={setSelectedBook}
            />
          </div>
          <Drawer
            className='drawer'
            clicked={clicked}
            drawerText={"Swipe to filter your book preferences"}
          >
            <Accordion2
              filters={filters}
              handleFilterChange={handleFilterChange}
              uniqueSkills={uniqueSkills}
              uniqueConcepts={uniqueConcepts}
              uniqueTypes={uniqueTypes}
            />
            {renderButtons()}
          </Drawer>
          {renderSelectedBookModal()}
        </>
      ) : (
        <>
          <div className={styles.bodyContainer}>
            {renderTopPicksModal()}
            <div className={styles.filterContainer}>
              <FilterComponent
                filters={filters}
                handleFilterChange={handleFilterChange}
                uniqueSkills={uniqueSkills}
                uniqueConcepts={uniqueConcepts}
                uniqueTypes={uniqueTypes}
                customStyles={customStyles}
                component='Books'
              />
            </div>
            <div className={styles.bookSide}>
              <Buk
                selectedSkills={filters.skill}
                records={filteredRecords}
                setSelectedBook={setSelectedBook}
              />
            </div>
            <div className={styles.buttonSide}>{renderButtons()}</div>
          </div>
          {renderSelectedBookModal()}
        </>
      )}
    </>
  );
}

export default BooksMobile;

booksmobile.module.css
.bodyContainer {
  width: 100dvw;
  height: 80dvh;
  display: grid;
  grid-template-rows: 150px 70dvh;
  grid-template-columns: 1fr 1fr 1fr;
  justify-items: center;
}

.filterContainer {
  grid-column: 1 / 4;
}

.bookSide {
  width: 90%;
  grid-column: 2 / 4;
  grid-row: 2 / 3;
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 0px 20px;
  align-items: start;
  align-content: space-evenly;
  min-height: 60dvh;
}

.buttonSide {
  margin-top: 100px;
  grid-column: 1 / 2;
  grid-row: 2 / 3;
}

.buttonContainer {
  display: flex;
  justify-content: space-between;
  padding-top: 10px;
}

.button {
  color: black;
  border: 3px solid #76b39d;
  border-radius: 10px;
  background-color: rgb(203, 203, 192);
  width: 180px;
  height: 35px;
}

.buttonsContainer {
  display: flex;
  flex-direction: column;
}
.buttonsContainer button {
  margin-bottom: 20px;
  color: black;
  border: 3px solid #76b39d;
  border-radius: 10px;
  background-color: rgb(203, 203, 192);
  width: 180px;
  height: 35px;
}

@media (max-width: 768px) {
  .bodyContainer {
    width: 100dvw;
    height: 80dvh;
    overflow-y: scroll;
    margin-top: 20px;
    padding: 0px 20px;
    display: block;
  }
}

@media (min-width: 1200px) {
  .bookSide {
    gap: 0px 80px;
  }
}

Components/

Accordion2.jsx
import * as React from "react";
import Accordion from "@mui/material/Accordion";
import AccordionSummary from "@mui/material/AccordionSummary";
import AccordionDetails from "@mui/material/AccordionDetails";
import ExpandMoreIcon from "@mui/icons-material/ExpandMore";
import CheckboxGroup from "./CheckboxGroup";

const matchh = ["at least 1 selected criteria", "all selected criteria"];

function Accordion2({
  filters,
  handleFilterChange,
  uniqueSkills,
  uniqueConcepts,
  uniqueTypes,
  uniqueTimes,
}) {
  return (
    <div style={{ paddingTop: "20px" }}>
      {/* <span>Show items that match: </span>
      <CheckboxGroup
        options={matchh}
        selectedOptions={matchh[0]}
        name='matchh'
        className={"formGroup"}
      /> */}

      <Accordion>
        <AccordionSummary
          expandIcon={<ExpandMoreIcon />}
          aria-controls='panel1-content'
          id='panel1-header'
          sx={{
            backgroundColor: "#f4f4f4",
            borderRadius: "10px",
          }}
        >
          Skill not taught in School
        </AccordionSummary>
        <AccordionDetails
          sx={{ backgroundColor: "#f4f4f4", marginTop: "-20px" }}
        >
          <CheckboxGroup
            options={uniqueSkills}
            selectedOptions={filters.skill}
            onChange={handleFilterChange}
            name='skill'
          />
        </AccordionDetails>
      </Accordion>
      <Accordion>
        <AccordionSummary
          expandIcon={<ExpandMoreIcon />}
          aria-controls='panel2-content'
          id='panel2-header'
          sx={{ backgroundColor: "#f4f4f4", borderRadius: "10px" }}
        >
          Key Concept
        </AccordionSummary>
        <AccordionDetails
          sx={{ backgroundColor: "#f4f4f4", marginTop: "-20px" }}
        >
          <CheckboxGroup
            options={uniqueConcepts}
            selectedOptions={filters.concept}
            onChange={handleFilterChange}
            name='concept'
          />
        </AccordionDetails>
      </Accordion>
      {uniqueTimes && (
        <Accordion>
          <AccordionSummary
            expandIcon={<ExpandMoreIcon />}
            aria-controls='panel3-content'
            id='panel3-header'
            sx={{ backgroundColor: "#f4f4f4", borderRadius: "10px" }}
          >
            Time to Finish
          </AccordionSummary>
          <AccordionDetails
            sx={{ backgroundColor: "#f4f4f4", marginTop: "-20px" }}
          >
            <CheckboxGroup
              options={uniqueTimes}
              selectedOptions={filters.time}
              onChange={handleFilterChange}
              name='time'
            />
          </AccordionDetails>
        </Accordion>
      )}
      {uniqueTypes && (
        <Accordion>
          <AccordionSummary
            expandIcon={<ExpandMoreIcon />}
            aria-controls='panel4-content'
            id='panel4-header'
            sx={{ backgroundColor: "#f4f4f4", borderRadius: "10px" }}
          >
            Type
          </AccordionSummary>
          <AccordionDetails
            sx={{ backgroundColor: "#f4f4f4", marginTop: "-20px" }}
          >
            <CheckboxGroup
              options={uniqueTypes}
              selectedOptions={filters.type}
              onChange={handleFilterChange}
              name='type'
            />
          </AccordionDetails>
        </Accordion>
      )}
    </div>
  );
}

export default Accordion2;


Buk.jsx
import { useState } from "react";
import woodenshelf from "/woodenshelfV2.png";
import Arrow from "/arrowRight.png";
import { useWindowSize } from "@uidotdev/usehooks";
import styles from "./buk.module.css";
import book1 from "/book1.png";
import book2 from "/book2.png";
import book3 from "/book3.png";
import book4 from "/book4.png";
import book5 from "/book5.png";

function Buk({ selectedSkills, records, setSelectedBook }) {
  const [currentIndices, setCurrentIndices] = useState({});
  const { width } = useWindowSize();

  let numberDisplayed;

  if (width > 768) {
    numberDisplayed = 10;
  } else {
    numberDisplayed = 8;
  }

  const bookImages = [book1, book2, book3, book4, book5];

  const getRandomBookImage = () => {
    const randomIndex = Math.floor(Math.random() * bookImages.length);
    return bookImages[randomIndex];
  };

  const handleArrowClick = (skill, totalCount, numberDisplayed, direction) => {
    setCurrentIndices((prev) => {
      const currentIndex = prev[skill] || 0;
      let newIndex;

      if (direction === "next") {
        newIndex =
          currentIndex + numberDisplayed < totalCount
            ? currentIndex + numberDisplayed
            : currentIndex;
      } else if (direction === "prev") {
        newIndex =
          currentIndex - numberDisplayed >= 0
            ? currentIndex - numberDisplayed
            : 0;
      }

      return { ...prev, [skill]: newIndex };
    });
  };

  const handleBookClick = (book) => {
    setSelectedBook(book);
  };

  // Determine which skills to display
  const skillsToDisplay =
    selectedSkills.length > 0
      ? selectedSkills
      : Array.from(new Set(records.flatMap((record) => record.skill)));

  const filterBooksBySkill = (skill) => {
    const filteredBooks = records.filter((record) =>
      record.skill.some(
        (s) => s.trim().toLowerCase() === skill.trim().toLowerCase()
      )
    );
    // console.log(`Books for ${skill}:`, filteredBooks); // Debug log
    return filteredBooks;
  };

  return (
    <>
      {skillsToDisplay.map((skill) => {
        const booksForSkill = filterBooksBySkill(skill);
        if (booksForSkill.length === 0) {
          return null;
        }

        const currentIndex = currentIndices[skill] || 0;
        const displayedBooks = booksForSkill.slice(
          currentIndex,
          currentIndex + numberDisplayed
        );
        const hasMore = booksForSkill.length > currentIndex + numberDisplayed;
        const hasPrevious = currentIndex > 0;

        return (
          <div key={skill} className={styles.shelfContainer}>
            <div className={styles.booksContainer}>
              {hasPrevious && (
                <img
                  src={Arrow}
                  alt='Previous books'
                  className={`${styles.arrowIcon} ${styles.arrowIconLeft}`}
                  onClick={() =>
                    handleArrowClick(
                      skill,
                      booksForSkill.length,
                      numberDisplayed,
                      "prev"
                    )
                  }
                  style={{ cursor: "pointer" }}
                />
              )}
              {displayedBooks.map((book) => (
                <div className={styles.bookItem} key={book.id}>
                  <img
                    src={getRandomBookImage()}
                    alt={book.name}
                    className={styles.bookImage}
                    onClick={() => handleBookClick(book)}
                  />
                </div>
              ))}
              {hasMore && (
                <img
                  src={Arrow}
                  alt='More books'
                  className={styles.arrowIcon}
                  onClick={() =>
                    handleArrowClick(
                      skill,
                      booksForSkill.length,
                      numberDisplayed,
                      "next"
                    )
                  }
                  style={{ cursor: "pointer" }}
                />
              )}
            </div>
            <div className={styles.woodContainer}>
              <img src={woodenshelf} alt='Wooden Shelf' />
              <span>{skill.charAt(0).toUpperCase() + skill.slice(1)}</span>
            </div>
          </div>
        );
      })}
    </>
  );
}

export default Buk;


buk.module.css
.booksContainer {
  display: flex;
  justify-content: center;
  min-height: 100px;
  align-items: flex-end;
}

.bookItem {
  display: flex;
}

.bookImage {
  width: 20px;
  max-height: 90px;
}

.bookName {
  text-align: center;
  font-size: 12px;
  margin-top: 5px;
}

.woodContainer {
  width: 100%;
  height: 20px;
  position: relative;
  margin-bottom: 20px;
}

.woodContainer img {
  width: 100%;
  height: 100%;
}

.woodContainer span {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  color: black;
  background-color: rgba(255, 255, 255, 0.6);
  width: 60%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
}

.arrowIcon {
  width: 30px;
  height: 30px;
  transition: transform 0.3s;
  align-self: center;
  position: relative;
  right: -20px;
}

.arrowIcon:hover {
  transform: translateX(5px);
}

.arrowIconLeft {
  transform: rotate(180deg);
  position: relative;
  right: 20px;
}

CheckboxGroup.jsx
import React from "react";
import {
  FormControl,
  FormControlLabel,
  Checkbox,
  FormGroup,
} from "@mui/material";

function CheckboxGroup({ options, selectedOptions, onChange, name }) {
  const handleChange = (event) => {
    const value = event.target.name;
    const isChecked = event.target.checked;

    let newSelectedOptions;
    if (isChecked) {
      newSelectedOptions = [...selectedOptions, value];
    } else {
      newSelectedOptions = selectedOptions.filter((item) => item !== value);
    }

    onChange(newSelectedOptions, { name });
  };

  return (
    <FormControl component='fieldset'>
      <FormGroup className='formGroup'>
        {options.map((option) => (
          <FormControlLabel
            key={option}
            control={
              <Checkbox
                checked={selectedOptions.includes(option)}
                onChange={handleChange}
                name={option}
              />
            }
            label={option.charAt(0).toUpperCase() + option.slice(1)}
          />
        ))}
      </FormGroup>
    </FormControl>
  );
}

export default CheckboxGroup;


Drawer2.jsx
import * as React from "react";
import { useEffect } from "react";
import PropTypes from "prop-types";
import { Global } from "@emotion/react";
import { styled } from "@mui/material/styles";
import { grey } from "@mui/material/colors";
import Button from "@mui/material/Button";
import Box from "@mui/material/Box";
import Skeleton from "@mui/material/Skeleton";
import Typography from "@mui/material/Typography";
import SwipeableDrawer from "@mui/material/SwipeableDrawer";
import FilterAltIcon from "@mui/icons-material/FilterAlt";
import Accordion2 from "./Accordion2";

const drawerBleeding = 56;

const Root = styled("div")(({ theme }) => ({
  //   height: "100%",
  backgroundColor: "var(--main-bg-color);",
  ...theme.applyStyles("dark", {
    // backgroundColor: theme.palette.background.default,
    // backgroundColor: "red",
  }),
}));

const StyledBox = styled("div")(({ theme }) => ({
  backgroundColor: "var(--main-bg-color);",
  ...theme.applyStyles("dark", {
    backgroundColor: grey[800],
  }),
}));

const Puller = styled("div")(({ theme }) => ({
  width: 30,
  height: 6,
  backgroundColor: grey[300],
  borderRadius: 3,
  position: "absolute",
  top: 8,
  left: "calc(50% - 15px)",
  ...theme.applyStyles("dark", {
    backgroundColor: grey[900],
  }),
}));

function Drawer2({ children, drawerText, clicked, ...props }) {
  const { window } = props;
  const [open, setOpen] = React.useState(false);

  useEffect(() => {
    if (clicked) {
      setOpen(false);
    }
  }, [clicked]);

  const toggleDrawer = (newOpen) => () => {
    setOpen(newOpen);
  };

  // This is used only for the example
  const container =
    window !== undefined ? () => window().document.body : undefined;

  return (
    <>
      <Global
        styles={{
          ".MuiDrawer-root > .MuiPaper-root": {
            height: `calc(75% - ${drawerBleeding}px)`,
            overflow: "visible",
          },
          ".MuiDrawer-root": {},
        }}
      />
      {/* <Box sx={{ textAlign: "center", pt: 1 }}>
        <Button onClick={toggleDrawer(true)}>Open</Button>
      </Box> */}
      <SwipeableDrawer
        container={container}
        anchor='bottom'
        open={open}
        onClose={toggleDrawer(false)}
        onOpen={toggleDrawer(true)}
        swipeAreaWidth={drawerBleeding}
        disableSwipeToOpen={false}
        ModalProps={{
          keepMounted: true,
        }}
      >
        <div className='upperCheckboxes'>
          <label>
            <input type='checkbox' name='' id='' />
            At least 1 selected criteria
          </label>
          <label>
            <input type='checkbox' name='' id='' />
            All selected criteria
          </label>
        </div>
        <StyledBox
          sx={{
            position: "absolute",
            top: -drawerBleeding,
            borderTopLeftRadius: 8,
            borderTopRightRadius: 8,
            visibility: "visible",
            right: 0,
            left: 0,
            borderTop: ".5px solid #76b39d",
            display: "flex",
            justifyContent: "center",
            borderRight: ".5px solid #76b39d",
            borderLeft: ".5px solid #76b39d",
          }}
        >
          <Puller />
          <Typography
            sx={{
              p: 2,
              pt: 3,
              color: "white",
              fontWeight: "bold",
              display: "flex",
            }}
          >
            {/* <FilterAltIcon
              sx={{
                fontSize: 28,
                fill: "none",
                stroke: "#76b39d",
                strokeWidth: 2,
              }}
            />{" "}
            Filter */}

            {drawerText}
          </Typography>
        </StyledBox>
        <StyledBox
          sx={{
            px: 2,
            pb: 4,
            height: "100%",
            overflow: "auto",
            display: "flex",
            flexDirection: "column",
            justifyContent: "space-between",
            borderLeft: ".5px solid #76b39d",
            borderRight: ".5px solid #76b39d",
          }}
        >
          {children}
        </StyledBox>
      </SwipeableDrawer>
    </>
  );
}

export default Drawer2;


FilterComponent.jsx
import React from "react";
import Select from "react-select";

// Helper function to create Select component
const createSelect = ({
  name,
  options,
  filters,
  handleFilterChange,
  customStyles,
}) => (
  <Select
    name={name}
    options={options.map((option) => ({
      value: option,
      label: option.charAt(0).toUpperCase() + option.slice(1),
    }))}
    onChange={handleFilterChange}
    isMulti
    value={filters.map((filter) => ({
      value: filter,
      label: filter.charAt(0).toUpperCase() + filter.slice(1),
    }))}
    styles={customStyles}
    className='react-select-container'
    classNamePrefix='react-select'
  />
);

const FilterComponent = ({
  filters,
  handleFilterChange,
  uniqueSkills,
  uniqueConcepts,
  uniqueTypes,
  uniqueTimes,
  uniqueLanguages,
  customStyles,
  component,
}) => {
  const sharedFilters = [
    {
      label: "Skill not taught in school",
      name: "skill",
      options: uniqueSkills,
      filterValue: filters.skill,
    },
    {
      label: "Key Concept",
      name: "concept",
      options: uniqueConcepts,
      filterValue: filters.concept,
    },
  ];

  const componentSpecificFilters = {
    Books: [
      {
        label: "Type",
        name: "type",
        options: uniqueTypes,
        filterValue: filters.type,
      },
    ],
    Podcasts: [
      {
        label: "Language",
        name: "language",
        options: uniqueLanguages,
        filterValue: filters.language,
      },
    ],
  };

  const renderFilters = (filterData) =>
    filterData.map(({ label, name, options, filterValue }) => (
      <label key={name}>
        {label}:
        {createSelect({
          name,
          options,
          filters: filterValue,
          handleFilterChange,
          customStyles,
        })}
      </label>
    ));

  return (
    <div className='filter-container'>
      {renderFilters(sharedFilters)}
      {componentSpecificFilters[component] &&
        renderFilters(componentSpecificFilters[component])}
    </div>
  );
};

export default FilterComponent;


Header.jsx
import React from "react";
import logo from "../logo.png";
import PlusCircle from "./PlusCircle.jsx";
import { useNavigate } from "react-router-dom";
import styles from "./header.module.css";

function Header() {
  const navigate = useNavigate();
  function handleGigitsRoute() {
    window.location.href = "https://gigits.io/";
  }

  function handleHomeRoute() {
    navigate("/");
  }

  return (
    <div className={styles.headerContainer}>
      <div className={styles.leftSide} onClick={handleHomeRoute}>
        <div className={styles.titleContainer}>
          {/* <PlusCircle fill='transparent' /> */}
          <h2>
            The <span>School</span> of Life
          </h2>
          <h3>real-world knowledge</h3>
        </div>
      </div>
      <div className={styles.logoContainer} onClick={handleGigitsRoute}>
        <img src={logo} alt='logo' />
      </div>
    </div>
  );
}

export default Header;

header.module.css
.headerContainer {
  display: flex;
  justify-content: space-between;
  align-items: center;
  min-height: 165px;
  background-color: var(--main-bg-color);
  color: white;
  filter: drop-shadow(0px 2px 12px rgb(107, 107, 107));
  padding: 0px 10px;
  z-index: 10;
  position: relative;
}

.leftSide {
  display: flex;
  cursor: pointer;
}

.titleContainer {
  height: fit-content;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding-left: 20px;
  margin-left: 20px;
  border-left: 1px solid white;
  transform: scale(0.8);
}

.titleContainer > h2 {
  font-size: 5.5rem;
  font-weight: 400;
}

.titleContainer > h2 > span {
  color: var(--main-green-color);
}

.titleContainer > h3 {
  font-size: 2.5rem;
  font-weight: 300;
  align-self: flex-start;
}

.logoContainer {
  display: flex;
  align-items: center;
  transition: transform 2s;
}

.logoContainer:hover {
  cursor: pointer;
  transform: scale(1.05);
}

.logoContainer > img {
  max-width: 220px;
}

@media (max-width: 768px) {
  .headerContainer {
    min-height: 80px;
  }
  .titleContainer {
    border-left: 0;
    padding-left: 0;
    margin-left: 0;
  }
  .titleContainer > h2 {
    font-size: 2.4rem;
  }

  .titleContainer > h3 {
    font-size: 1.4rem;
    font-weight: 400;
  }
  .logoContainer > img {
    width: 60px;
  }
}

Modal.jsx
import React, { useEffect, useRef } from "react";
import ReactDOM from "react-dom";
import SpotifyPlayer from "./SpotifyPlayer.jsx";
import PlusCircle from "./PlusCircle.jsx";
import styles from "./modal.module.css";

function Modal({
  title,
  author,
  topPicks,
  oneLiner,
  description,
  spotifyUrl,
  cover,
  link,
  onClose,
  time,
  skills,
  concepts,
}) {
  // console.log("Modal spotifyUrl:", spotifyUrl);
  const modalRef = useRef(null);

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (modalRef.current && !modalRef.current.contains(event.target)) {
        if (onClose) {
          onClose();
        }
      }
    };

    document.addEventListener("mousedown", handleClickOutside);
    document.addEventListener("touchstart", handleClickOutside);

    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
      document.removeEventListener("touchstart", handleClickOutside);
    };
  }, [onClose]);

  const handleModalClick = (e) => {
    e.stopPropagation();
  };

  return ReactDOM.createPortal(
    <div className={styles.modalContainer}>
      {description && (
        <div
          className={styles.modalPod}
          ref={modalRef}
          onClick={handleModalClick}
        >
          <SpotifyPlayer url={spotifyUrl} />
          <h3>{description}</h3>
          <div className={styles.tagsContainer}>
            <p>{time}</p>
            {skills.map((skill) => (
              <p key={skill}>{skill}</p>
            ))}
            {concepts.map((concept) => (
              <p key={concept}>{concept}</p>
            ))}
          </div>

          <div className={styles.bottomSpan}>
            <a
              href='https://gigits.io'
              target='_blank'
              rel='noopener noreferrer'
            >
              <PlusCircle width='25' height='25' />
              <p>gigit</p> <span>your learning time</span>
            </a>
          </div>
          {topPicks && (
            <>
              <h2>Top Picks: </h2>
              {topPicks()}
            </>
          )}
        </div>
      )}
      {author && (
        <div
          className={styles.modalBook}
          ref={modalRef}
          onClick={handleModalClick}
        >
          <div className={styles.leftSide}>
            <div className={styles.imageContainer}>
              <img src={cover} alt='' />
            </div>
          </div>
          <div className={styles.rightSide}>
            <a href={link} target='_blank' rel='noopener noreferrer'>
              <button>Find book</button>
            </a>
            <h2>Author: {author}</h2>
            <h3>{oneLiner}</h3>
          </div>
          <div className={styles.bottomSpan}>
            <a
              href='https://gigits.io'
              target='_blank'
              rel='noopener noreferrer'
            >
              <PlusCircle width='25' height='25' />
              <p>gigit</p> <span>your learning time</span>
            </a>
          </div>
        </div>
      )}
      {topPicks && (
        <>
          <div
            className={styles.modal}
            ref={modalRef}
            onClick={handleModalClick}
          >
            <h2>Top Picks: </h2>
            {topPicks()}
          </div>
        </>
      )}
    </div>,
    document.body
  );
}

export default Modal;


modal.module.css
.modalContainer {
  position: fixed;
  top: 0;
  left: 0;
  width: 100dvw;
  height: 100dvh;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: rgba(0, 0, 0, 0.5);
  z-index: 1000;
}

.modalBook {
  width: 85vw;
  max-width: 800px;
  padding: 20px;
  background-color: #616660;
  color: white;
  border-radius: 20px;
  box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.3);
  z-index: 1001;
  position: relative;
}

.modalBook p,
.modalPod p {
  margin: 0px 5px;
  font-size: 18px;
  font-weight: 300;
}

.modalBook span,
.modalPod span {
  font-size: 18px;
  font-weight: 400;
}

.modalPod {
  width: 85vw;
  max-width: 800px;
  padding: 20px;
  background-color: #616660;
  color: white;
  border-radius: 20px;
  box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.3);
  z-index: 1001;
  position: relative;
  min-height: 30dvh;
}

.modalPod h3 {
  text-align: center;
  font-size: 16px;
  font-weight: 400;
  padding-top: 10px;
}

.modal {
  width: 85vw;
  max-width: 800px;
  padding: 20px;
  background-color: #616660;
  color: white;
  border-radius: 20px;
  box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.3);
  z-index: 1001;
  position: relative;
}

.modal > h2,
.modal > h3 {
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 20px 40px;
}

.modal > h2 {
  margin-top: 20px;
}

.modal p {
  margin: 0px 5px;
  font-size: 18px;
  font-weight: 300;
}

.modal span {
  font-size: 18px;
  font-weight: 400;
}

.bottomSpan {
  align-items: center;
  display: flex;
  position: absolute;
  bottom: 5%;
  right: 5%;
}

.leftSide {
  display: flex;
  grid-column: 1 / 2;
  grid-row: 1 / 2;
  justify-content: center;
  align-items: center;
}

.imageContainer {
  width: 230px;
  display: flex;
  justify-content: center;
  object-fit: cover;
}

.imageContainer img {
  width: 100%;
  height: 100%;
}

.rightSide {
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: flex-start;
  grid-column: 2 / 3;
  grid-row: 1 / 2;
}

.modalBook {
  display: grid;
  width: 90vw;
  padding: 15px;
  min-height: 30dvh;
  max-height: 60dvh;
  position: relative;
  grid-template-columns: 1fr 1fr;
  grid-template-rows: 1fr;
}
.modalBook h2 {
  margin-top: 20px;
  font-size: 18px;
  font-weight: 400;
}

.modalBook h3 {
  margin-top: 20px;
  font-size: 18px;
  font-weight: 400;
}

.modalBook button {
  margin-top: 20px;
  height: 30px;
  width: 140px;
  color: white;
  background-color: #76b39d;
  border-radius: 12px;
  border: none;
  justify-self: center;
}

.modal p,
.modalBook p {
  margin: 0px 5px;
  font-size: 20px;
  font-weight: 300;
}

.modal span,
.modalBook span {
  font-size: 20px;
  font-weight: 400;
}

.bottomSpan {
  align-items: center;
  display: flex;
  position: absolute;
  bottom: 5%;
  right: 5%;
}

.bottomSpan a {
  text-decoration: none;
  color: inherit;
  display: flex;
  align-items: center;
}

.tagsContainer {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  row-gap: 5px;
  padding-top: 10px;
  min-height: fit-content;
}

.tagsContainer p {
  background-color: #76b39d;
  border-radius: 12px;
  padding: 0px 5px;
}

@media (max-width: 768px) {
  .modal {
    width: 85dvw;
    height: fit-content;
  }

  .modal > h3 {
    margin: 10px 10px;
  }

  .modal {
    width: 90vw;
    padding: 15px;
    min-height: 50dvh;
    max-height: 60dvh;
    display: flex;
    flex-direction: column;
    position: relative;
  }

  .leftSide {
    display: flex;
    grid-column: 1 / 2;
    grid-row: 1 / 2;
    justify-content: center;
    align-items: flex-start;
  }

  .imageContainer {
    width: 150px;
    display: flex;
    justify-content: center;
    object-fit: cover;
  }

  .imageContainer img {
    width: 100%;
    height: 100%;
  }

  .rightSide {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: center;
    grid-column: 2 / 3;
    grid-row: 1 / 2;
  }

  .modalBook {
    display: grid;
    width: 90vw;
    padding: 15px;
    min-height: 50dvh;
    max-height: 60dvh;
    position: relative;
    grid-template-columns: 1fr 1fr;
    grid-template-rows: 1fr;
  }
  .modalBook h2 {
    margin-top: 20px;
    font-size: 14px;
    font-weight: 400;
  }

  .modalBook h3,
  .modalPod h3 {
    text-align: center;
    margin-top: 20px;
    font-size: 14px;
    font-weight: 400;
  }

  .modalBook button {
    margin-top: 20px;
    height: 30px;
    width: 140px;
    color: white;
    background-color: #76b39d;
    border-radius: 12px;
    border: none;
    justify-self: center;
  }

  .modal p,
  .modalBook p,
  .modalPod p {
    margin: 0px 5px;
    font-size: 14px;
    font-weight: 300;
  }

  .modal span,
  .modalBook span,
  .modalPod span {
    font-size: 14px;
    font-weight: 400;
  }

  .bottomSpan {
    align-items: center;
    display: flex;
    position: absolute;
    bottom: 5%;
    right: 5%;
  }

  .bottomSpan a {
    text-decoration: none;
    color: inherit;
    display: flex;
    align-items: center;
  }

  .modalPod {
    min-height: 50dvh;
  }
}


PlusCircle.jsx
import React from "react";

function PlusCircle({ width = "35", height = "35" }) {
  return (
    <svg
      xmlns='http://www.w3.org/2000/svg'
      width={width}
      height={height}
      viewBox='0 0 24 24'
      fill='transparent'
      stroke='currentColor'
      strokeWidth='2'
      strokeLinecap='round'
      strokeLinejoin='round'
      className='icon'
    >
      <circle cx='12' cy='12' r='10'></circle>
      <line x1='12' y1='8' x2='12' y2='16'></line>
      <line x1='8' y1='12' x2='16' y2='12'></line>
    </svg>
  );
}

export default PlusCircle;

Pods.jsx
import { useState } from "react";
import mic from "/mic2.png";
import woodenshelf from "/woodenshelfV2.png";
import Arrow from "/arrowRight.png";
import styles from "./pods.module.css";
import { useWindowSize } from "@uidotdev/usehooks";

function Pods({ selectedSkills, records, selectedTimes, setSelectedPodcast }) {
  const [currentIndices, setCurrentIndices] = useState({});
  const { width } = useWindowSize();

  let numberDisplayed;

  if (width > 768) {
    numberDisplayed = 6;
  } else {
    numberDisplayed = 4;
  }

  const handleArrowClick = (skill, totalCount, numberDisplayed, direction) => {
    setCurrentIndices((prev) => {
      const currentIndex = prev[skill] || 0;
      let newIndex;

      if (direction === "next") {
        newIndex =
          currentIndex + numberDisplayed < totalCount
            ? currentIndex + numberDisplayed
            : currentIndex;
      } else if (direction === "prev") {
        newIndex =
          currentIndex - numberDisplayed >= 0
            ? currentIndex - numberDisplayed
            : 0;
      }

      return { ...prev, [skill]: newIndex };
    });
  };

  const handlePodcastClick = (podcast) => {
    const spotifyUrl = convertToEmbedUrl(podcast.spotifyUrl);
    setSelectedPodcast({ ...podcast, spotifyUrl });
  };

  const convertToEmbedUrl = (url) => {
    if (!url) {
      console.log("No URL provided");
      return "";
    }

    const episodeId = url.match(/episode\/([a-zA-Z0-9]+)/)?.[1];
    // console.log("Extracted Spotify Episode ID:", episodeId);
    const embedUrl = episodeId
      ? `https://open.spotify.com/embed/episode/${episodeId}?utm_source=generator`
      : "";
    // console.log("Final Embed URL:", embedUrl);
    return embedUrl;
  };

  function getMicStyle(time) {
    const timeToMicStyle = {
      "< 30 mins": styles.micOne,
      "31-45 mins": styles.micTwo,
      "45-60 mins": styles.micThree,
      "1-2 hours": styles.micFour,
      "2-3 hours": styles.micFive,
      "+3 hours": styles.micSix,
      ">3 hours": styles.micSix,
    };
    return timeToMicStyle[time] || styles.micDefault;
  }

  // Determine which skills to display
  const skillsToDisplay =
    selectedSkills.length > 0
      ? selectedSkills
      : Array.from(new Set(records.flatMap((record) => record.skill)));

  return (
    <>
      {skillsToDisplay.map((skill) => {
        const skillRecords = records.filter((record) => {
          const hasSkill = record.skill
            .map((s) => s.toLowerCase())
            .includes(skill.toLowerCase());

          if (!hasSkill) return false;

          if (selectedTimes.length === 0) return true;

          const recordTime = record.time[0];
          return selectedTimes.includes(recordTime);
        });

        if (skillRecords.length === 0) {
          return null;
        }

        const currentIndex = currentIndices[skill] || 0;
        const displayedPodcasts = skillRecords.slice(
          currentIndex,
          currentIndex + numberDisplayed
        );
        const hasMore = skillRecords.length > currentIndex + numberDisplayed;
        const hasPrevious = currentIndex > 0;

        return (
          <div key={skill} className={styles.podReel}>
            <div className={styles.slider}>
              {hasPrevious && (
                <img
                  src={Arrow}
                  alt='Previous podcasts'
                  className={`${styles.arrowIcon} ${styles.arrowIconLeft}`}
                  onClick={() =>
                    handleArrowClick(
                      skill,
                      skillRecords.length,
                      numberDisplayed,
                      "prev"
                    )
                  }
                  style={{ cursor: "pointer" }}
                />
              )}
              {displayedPodcasts.map((podcast) => {
                const time = podcast.time[0];
                const micStyle = getMicStyle(time);
                return (
                  <img
                    key={podcast.id}
                    src={mic}
                    alt=''
                    className={micStyle}
                    onClick={() => handlePodcastClick(podcast)}
                  />
                );
              })}
              {hasMore && (
                <img
                  src={Arrow}
                  alt='More podcasts'
                  className={styles.arrowIcon}
                  onClick={() =>
                    handleArrowClick(
                      skill,
                      skillRecords.length,
                      numberDisplayed,
                      "next"
                    )
                  }
                  style={{ cursor: "pointer" }}
                />
              )}
            </div>
            <div className={styles.woodContainer}>
              <img src={woodenshelf} alt='' />
              <span>{skill.charAt(0).toUpperCase() + skill.slice(1)}</span>
            </div>
          </div>
        );
      })}
    </>
  );
}

export default Pods;

pods.module.css
.micOne,
.micTwo,
.micThree,
.micFour,
.micFive,
.micSix {
  height: 60px;
  justify-self: center;
  align-self: center;
  border-radius: 4px;
}

.micOne {
  background-color: rgb(118, 179, 157);
}

.micTwo {
  background-color: rgb(150, 127, 102);
}

.micThree {
  background-color: rgb(133, 158, 156);
}

.micFour {
  background-color: rgb(151, 143, 163);
}

.micFive {
  background-color: rgb(209, 179, 124);
}

.micSix {
  background-color: rgb(121, 66, 31);
}

.podReel {
  margin-bottom: 40px;
}

.slider {
  display: flex;
  overflow-x: auto;
  align-items: center;
}

.slider img {
  margin: 0px 10px;
}

.woodContainer {
  width: 100%;
  height: 20px;
  margin-top: 10px;
  position: relative;
}

.woodContainer img {
  width: 100%;
  height: 100%;
}

.woodContainer span {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  color: black;
  background-color: rgba(255, 255, 255, 0.6);
  width: 60%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  text-transform: capitalize;
}

.arrowIcon {
  width: 30px; /* Adjust size as needed */
  height: 30px;
  transition: transform 0.3s;
  align-self: center;
}

.arrowIcon:hover {
  transform: translateX(5px);
}

.arrowIconLeft {
  transform: rotate(180deg);
}

@media (min-width: 768px) {
  .woodContainer {
  }
  .podReel {
    margin-bottom: 80px;
  }

  .micOne,
  .micTwo,
  .micThree,
  .micFour,
  .micFive,
  .micSix {
    height: 80px;
  }

  .slider {
    justify-content: center;
  }
}


SpotifyPlayer.jsx
const SpotifyPlayer = ({ url }) => {
  // console.log("SpotifyPlayer URL:", url);
  // console.log("Rendering Spotify Player with URL:", url);
  return (
    <div className='spotify-container'>
      <iframe
        style={{
          borderRadius: "12px",
          justifyContent: "center",
          width: "100%",
          height: "152px",
        }}
        src={url}
        width='100%'
        frameBorder='0'
        allow='autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture'
        loading='lazy'
      ></iframe>
    </div>
  );
};

export default SpotifyPlayer;


TopPicks.jsx
import React from "react";

function TopPicks({ topList, type }) {
  if (type === "book") {
    return (
      <ol className='top-picks-list'>
        {topList.map((book, index) => (
          <a href={book.link} target='_blank' rel='noopener noreferrer'>
            <li key={index} className='top-picks-item'>
              {book.name}
            </li>
          </a>
        ))}
      </ol>
    );
  }

  if (type === "podcast") {
    return (
      <ol className='top-picks-list'>
        {topList.map((podcast, index) => (
          <a
            href={podcast.spotifyUrl}
            target='_blank'
            rel='noopener noreferrer'
          >
            <li key={index} className='top-picks-item'>
              {podcast.name}
            </li>
          </a>
        ))}
      </ol>
    );
  }
}

export default TopPicks;
